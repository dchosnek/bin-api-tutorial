AWSTemplateFormatVersion: "2010-09-09"
Description: REST Api for bins

# =============================================================================
# INPUTS - questions to ask user at stack creation time
Parameters:

  JwtSecretPhrase:
    Type: String
    Description: Encoding secret for JWT
    NoEcho: true
    MinLength: 20
    Default: ABCDEFGHIJKLMNOPQRSTUVWXYZ

# =============================================================================
# RESOURCES
Resources:

  # ---------------------------------------------
  # IAM Roles (two created)
  IamCreateToken:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-CreateToken"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Description: role for lambda that handles Webex webhooks
      Policies:
        - PolicyName: localCloudWatchWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  # InvokePermissionCreateToken:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref LambdaCreateToken
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayMain}/*/POST/webex"

  # ---------------------------------------------
  # DynamoDB Table
  BinsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: jwt
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: jwt
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
      TableName: !Sub "${AWS::StackName}-bins"

  LambdaCreateToken:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        # S3Bucket: !Ref S3BucketName
        # S3Key: !Ref S3KeyWebexPackage
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print("EVENT IS BELOW")
              print(event)
      Description: "Creates JWT token"
      FunctionName: !Sub "${AWS::StackName}-CreateToken"
      Handler: index.lambda_handler
      Role: !GetAtt IamCreateToken.Arn
      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          SECRET_PHRASE: !Ref JwtSecretPhrase
          TABLE_NAME: !Ref BinsTable


  # ---------------------------------------------
  # API Gateway - one gateway with:
  #    3 resources (webex, ideas, smartsheet)
  #    2 stages (dev and prod)
  ApiGatewayMain:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Description: used for lab for learning about REST APIs
      Name: !Ref AWS::StackName

  ApiGwResourceAbout:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGatewayMain.RootResourceId
      PathPart: about
      RestApiId: !Ref ApiGatewayMain

  ApiGwAboutGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {
                  "SpiritAnimal": "Magic Pony",
                  "CreationDate": "December 22, 2023"
                }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
      ResourceId: !Ref ApiGwResourceAbout
      RestApiId: !Ref ApiGatewayMain

  ApiGwResourceToken:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGatewayMain.RootResourceId
      PathPart: token
      RestApiId: !Ref ApiGatewayMain

  ApiGwTokenGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.querystring.email: true
      RequestValidatorId: !Ref ApiGwEmailValidator
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {
                  "message": "Token created successfully"
                }
          - StatusCode: 400
            ResponseTemplates:
              application/json: |
                {
                  "message": "Token already exists"
                }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
        - StatusCode: 403
          ResponseModels:
            application/json: "Error"
      ResourceId: !Ref ApiGwResourceToken
      RestApiId: !Ref ApiGatewayMain

  # ------------------------------------
  # API Gateway models

  EmailParameterModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ApiGatewayMain
      ContentType: "application/json"
      Name: "EmailParameterModel"
      Schema:
        type: "object"
        properties:
          email:
            type: "string"
        required: ["email"]

  ApiGwEmailValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref ApiGatewayMain
      Name: "EmailValidator"
      ValidateRequestBody: false
      ValidateRequestParameters: true

  # ------------------------------------
  # API Gateway stage and deploy

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGwAboutGet
      - ApiGwTokenGet
    Properties:
      Description: !Sub "created by CloudFormation template ${AWS::StackName}"
      RestApiId: !Ref ApiGatewayMain

  ApiGatewayStageV1:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: v1
      Description: !Sub "created by CloudFormation template ${AWS::StackName}"
      RestApiId: !Ref ApiGatewayMain
      DeploymentId: !Ref ApiGatewayDeployment

Outputs:
  ApiV1Url:
    Description: URL for the v1 deployment of this API
    Value: !Sub "https://${ApiGatewayMain}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageV1}/"