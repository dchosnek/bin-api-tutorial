AWSTemplateFormatVersion: "2010-09-09"
Description: REST API Tutorial using storage bins

# =============================================================================
# INPUTS - questions to ask user at stack creation time
Parameters:

  JwtSecretPhrase:
    Type: String
    Description: Encoding secret for JWT
    NoEcho: true
    MinLength: 20
    Default: ABCDEFGHIJKLMNOPQRSTUVWXYZ

# =============================================================================
# RESOURCES
Resources:

  # ---------------------------------------------
  # IAM Roles (two created)
  IamCreateToken:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-CreateToken"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Description: role for lambda that creates JWT
      Policies:
        - PolicyName: localCloudWatchWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: localDynamoWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
              Resource: !GetAtt BinsTable.Arn
  
  IamGetBins:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-GetBins"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Description: role for lambda that retrieves bins
      Policies:
        - PolicyName: localCloudWatchWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: localDynamoRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:GetItem
              Resource: !GetAtt BinsTable.Arn
  
  IamCreateBins:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-CreateBins"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Description: role for lambda that creates bins
      Policies:
        - PolicyName: localCloudWatchWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: localDynamoRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:UpdateItem
              Resource: !GetAtt BinsTable.Arn
  
  IamBinHandler:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-BinHandler"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Description: role for lambda that creates bins
      Policies:
        - PolicyName: localCloudWatchWrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
        - PolicyName: localDynamoRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              Resource: !GetAtt BinsTable.Arn

  InvokePermissionCreateToken:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaCreateToken
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayMain}/*/GET/token"
  
  InvokePermissionGetBins:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaGetBins
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayMain}/*/GET/bins"
  
  InvokePermissionCreateBins:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaCreateBins
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayMain}/*/POST/bins"
  
  InvokePermissionBinHandler:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaBinHandler
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayMain}/*/*/*"

  # ---------------------------------------------
  # DynamoDB Table
  BinsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      # TableName: !Sub "${AWS::StackName}-bins"

  LambdaCreateToken:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: doron-lambda
        S3Key: create_token.zip
        # ZipFile: |
        #   import json
        #   def lambda_handler(event, context):
        #       print("EVENT IS BELOW")
        #       print(event)
      Description: "Creates JWT token"
      FunctionName: !Sub "${AWS::StackName}-CreateToken"
      Handler: index.lambda_handler
      Role: !GetAtt IamCreateToken.Arn
      Runtime: python3.12
      Timeout: 30
      Environment:
        Variables:
          SECRET_PHRASE: !Ref JwtSecretPhrase
          TABLE_NAME: !Ref BinsTable
  
  LambdaGetBins:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: doron-lambda
        S3Key: create_token.zip
        # ZipFile: |
        #   import json
        #   def lambda_handler(event, context):
        #       print("EVENT IS BELOW")
        #       print(event)
      Description: "gets a list of all bins"
      FunctionName: !Sub "${AWS::StackName}-GetBins"
      Handler: index.lambda_handler
      Role: !GetAtt IamGetBins.Arn
      Runtime: python3.12
      Timeout: 30
      Environment:
        Variables:
          SECRET_PHRASE: !Ref JwtSecretPhrase
          TABLE_NAME: !Ref BinsTable
  
  LambdaCreateBins:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: doron-lambda
        S3Key: create_token.zip
        # ZipFile: |
        #   import json
        #   def lambda_handler(event, context):
        #       print("EVENT IS BELOW")
        #       print(event)
      Description: "creates a new bin"
      FunctionName: !Sub "${AWS::StackName}-CreateBins"
      Handler: index.lambda_handler
      Role: !GetAtt IamCreateBins.Arn
      Runtime: python3.12
      Timeout: 30
      Environment:
        Variables:
          SECRET_PHRASE: !Ref JwtSecretPhrase
          TABLE_NAME: !Ref BinsTable
  
  LambdaBinHandler:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: doron-lambda
        S3Key: create_token.zip
      Description: "handles operations to individual bins"
      FunctionName: !Sub "${AWS::StackName}-BinHandler"
      Handler: index.lambda_handler
      Role: !GetAtt IamBinHandler.Arn
      Runtime: python3.12
      Timeout: 30
      Environment:
        Variables:
          SECRET_PHRASE: !Ref JwtSecretPhrase
          TABLE_NAME: !Ref BinsTable

  # ---------------------------------------------
  # Cloudwatch logs: log group for lambda function
  LogGroupCreateToken:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaCreateToken}"
      RetentionInDays: 5
  
  LogGroupGetBins:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaGetBins}"
      RetentionInDays: 5

  LogGroupCreateBins:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaCreateBins}"
      RetentionInDays: 5

  LogGroupBinHandler:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaBinHandler}"
      RetentionInDays: 5

  # ---------------------------------------------
  # API Gateway - one gateway with:
  #    3 resources (webex, ideas, smartsheet)
  #    2 stages (dev and prod)
  ApiGatewayMain:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Description: used for lab for learning about REST APIs
      Name: !Ref AWS::StackName

  ApiGwResourceAbout:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGatewayMain.RootResourceId
      PathPart: about
      RestApiId: !Ref ApiGatewayMain

  ApiGwAboutGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {
                  "SpiritAnimal": "Magic Pony",
                  "CreationDate": "December 22, 2023"
                }
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
      ResourceId: !Ref ApiGwResourceAbout
      RestApiId: !Ref ApiGatewayMain

  ApiGwResourceToken:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGatewayMain.RootResourceId
      PathPart: token
      RestApiId: !Ref ApiGatewayMain

  ApiGwTokenGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.querystring.email: true
      RequestValidatorId: !Ref ApiGwEmailValidator
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaCreateToken.Arn}/invocations
        RequestTemplates:
          application/json: |
            {
              "email": "$input.params('email')"
            }
      ResourceId: !Ref ApiGwResourceToken
      RestApiId: !Ref ApiGatewayMain

  ApiGwResourceBins:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGatewayMain.RootResourceId
      PathPart: bins
      RestApiId: !Ref ApiGatewayMain

  ApiGwBinsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaGetBins.Arn}/invocations
      ResourceId: !Ref ApiGwResourceBins
      RestApiId: !Ref ApiGatewayMain
  
  ApiGwBinsPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaCreateBins.Arn}/invocations
      ResourceId: !Ref ApiGwResourceBins
      RestApiId: !Ref ApiGatewayMain

  ApiGwResourceBinId:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !Ref ApiGwResourceBins
      PathPart: '{binId}'
      RestApiId: !Ref ApiGatewayMain

  GwBinIdGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBinHandler.Arn}/invocations
      ResourceId: !Ref ApiGwResourceBinId
      RestApiId: !Ref ApiGatewayMain

  ApiGwBinIdPut:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBinHandler.Arn}/invocations
      ResourceId: !Ref ApiGwResourceBinId
      RestApiId: !Ref ApiGatewayMain

  ApiGwBinIdDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaBinHandler.Arn}/invocations
      ResourceId: !Ref ApiGwResourceBinId
      RestApiId: !Ref ApiGatewayMain

  # ------------------------------------
  # API Gateway models

  EmailParameterModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ApiGatewayMain
      ContentType: "application/json"
      Name: "EmailParameterModel"
      Schema:
        type: "object"
        properties:
          email:
            type: "string"
        required: ["email"]

  ApiGwEmailValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref ApiGatewayMain
      Name: "EmailValidator"
      ValidateRequestBody: false
      ValidateRequestParameters: true

  # ------------------------------------
  # API Gateway stage and deploy

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGwAboutGet
      - ApiGwTokenGet
    Properties:
      Description: !Sub "created by CloudFormation template ${AWS::StackName}"
      RestApiId: !Ref ApiGatewayMain

  ApiGatewayStageV1:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: v1
      Description: !Sub "created by CloudFormation template ${AWS::StackName}"
      RestApiId: !Ref ApiGatewayMain
      DeploymentId: !Ref ApiGatewayDeployment

Outputs:
  ApiV1Url:
    Description: URL for the v1 deployment of this API
    Value: !Sub "https://${ApiGatewayMain}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStageV1}/"